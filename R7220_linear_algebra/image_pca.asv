% image compression with PCA, basic version
% refernce: https://github.com/Wanggcong/Statistical-Analysis-Method-/blob/master/project3/16337292_%E8%A2%81%E6%B5%A9%E6%89%AC/pca.m


clear; clc; close all;
% parameters
comp_ratio = 0.5;


% get the gray image data
img = imread('cityscape.jpg');
data = im2double(rgb2gray(img));
[n_col, ~] = size(img);


% whitening
avg = mean(mean(data));
white_data = data - avg;


% covariance matrix
cov_mat = white_data * white_data';


% eigen values and vectors
[eig_vctr, eig_values] = eig(cov_mat);
[~, order] = sort(diag(eig_values), 'descend');
eig_vctr = eig_vctr(:, order);


% compression
eig_vctr_comp = eig_vctr(:, 1:floor(n_col*comp_ratio));
img_regen = (white_data' * eig_vctr_comp) * eig_vctr_comp';


[E,D] = eig(covarianceMat); %E??????D????
[temp,order] = sort(diag(D),'descend');
E = E(:,order); %????????
E_leave = E(:,1:end_W);
g_proj = data' * E_leave;
g_rec = g_proj * E_leave';
s = g_rec' + mean_;

sub = double(img) - s;


figure(1),subplot(131),imshow(img,[]); title('Original Image');
figure(1),subplot(132),imshow(s,[]); title('Recovered img');
figure(1),subplot(133),imshow(sub,[]); title('sub img');





% first version, ignore below

% % take only the square part
% [original_row, origina_col] = size(img_gray);
% len_edge = min(original_row, origina_col);
% data = img_gray(1:len_edge, 1:len_edge);
% % imshow(data);
% 
% % eigenvalues and eigenvectors
% [V, D] = eig(data);
% 
% % pca
% n_keep = 30;
% D(n_keep+1:end, :) = 0;
% out = V * D * inv(V);
% imshow(out);
% 
